generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String    @id @default(cuid())
  username String    @unique
  email    String    @unique
  accounts Account[]
  sessions Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  provider          String
  providerAccountId String
  accessToken       String?
  refreshToken      String?
  expiresAt         Int?
  idToken           String?
  scope             String?
  sessionState      String?
  tokenType         String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  createdAt    DateTime @default(now())
  ipAddress    String?
  updatedAt    DateTime @updatedAt
  userAgent    String?
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Verification {
  id         String   @id @default(cuid())
  identifier String
  token      String
  createdAt  DateTime @default(now())
  expiresAt  DateTime
  updatedAt  DateTime @updatedAt
  value      String

  @@unique([identifier, token])
}

model Course {
  id        Int                    @id @default(autoincrement())
  subject   String
  title     String
  url       String
  createdAt DateTime               @default(now())
  embedding Unsupported("vector")?
  tags      CourseTag[]            @relation("CourseToCourseTag")
}

model CourseTag {
  id     Int      @id @default(autoincrement())
  name   String   @unique
  course Course[] @relation("CourseToCourseTag")
}

model course_vectors {
  id        String                 @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  text      String?
  metadata  Json?
  embedding Unsupported("vector")?
}
